<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotNetRdf.Inferencing</name>
    </assembly>
    <members>
        <member name="M:VDS.RDF.Configuration.InferencingStoreFactory.TryLoadObject(VDS.RDF.IGraph,VDS.RDF.INode,System.Type,System.Object@)">
            <summary>
            Tries to load a Triple Store based on information from the Configuration Graph.
            </summary>
            <param name="g">Configuration Graph.</param>
            <param name="objNode">Object Node.</param>
            <param name="targetType">Target Type.</param>
            <param name="obj">Output Object.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Configuration.InferencingStoreFactory.CanLoadObject(System.Type)">
            <summary>
            Gets whether this Factory can load objects of the given Type.
            </summary>
            <param name="t">Type.</param>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Configuration.ReasonerFactory">
            <summary>
            Factory class for producing Reasoners from Configuration Graphs.
            </summary>
        </member>
        <member name="M:VDS.RDF.Configuration.ReasonerFactory.TryLoadObject(VDS.RDF.IGraph,VDS.RDF.INode,System.Type,System.Object@)">
            <summary>
            Tries to load a Reasoner based on information from the Configuration Graph.
            </summary>
            <param name="g">Configuration Graph.</param>
            <param name="objNode">Object Node.</param>
            <param name="targetType">Target Type.</param>
            <param name="obj">Output Object.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Configuration.ReasonerFactory.CanLoadObject(System.Type)">
            <summary>
            Gets whether this Factory can load objects of the given Type.
            </summary>
            <param name="t">Type.</param>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.IInferencingTripleStore">
            <summary>
            Interface for Triple Stores which can have a <see cref="T:VDS.RDF.Query.Inference.IInferenceEngine">IInferenceEngine</see> attached to them.
            </summary>
        </member>
        <member name="M:VDS.RDF.IInferencingTripleStore.AddInferenceEngine(VDS.RDF.Query.Inference.IInferenceEngine)">
            <summary>
            Adds an Inference Engine to the Triple Store.
            </summary>
            <param name="reasoner">Reasoner to add.</param>
        </member>
        <member name="M:VDS.RDF.IInferencingTripleStore.RemoveInferenceEngine(VDS.RDF.Query.Inference.IInferenceEngine)">
            <summary>
            Removes an Inference Engine from the Triple Store.
            </summary>
            <param name="reasoner">Reasoner to remove.</param>
        </member>
        <member name="M:VDS.RDF.IInferencingTripleStore.ClearInferenceEngines">
            <summary>
            Clears all Inference Engines from the Triple Store.
            </summary>
        </member>
        <member name="M:VDS.RDF.IInferencingTripleStore.ApplyInference(VDS.RDF.IGraph)">
            <summary>
            Applies Inference to the given Graph.
            </summary>
            <param name="g">Graph to apply inference to.</param>
            <remarks>
            Allows you to apply Inference to a Graph even if you're not putting that Graph into the Store.
            </remarks>
        </member>
        <member name="F:VDS.RDF.InferencingTripleStore._reasoners">
            <summary>
            List of Reasoners that are applied to Graphs as they are added to the Triple Store.
            </summary>
        </member>
        <member name="M:VDS.RDF.InferencingTripleStore.ApplyInference(VDS.RDF.IGraph)">
            <summary>
            Applies Inference to the given Graph.
            </summary>
            <param name="g">Graph to apply inference to.</param>
        </member>
        <member name="M:VDS.RDF.InferencingTripleStore.AddInferenceEngine(VDS.RDF.Query.Inference.IInferenceEngine)">
            <summary>
            Adds an Inference Engine to the Triple Store.
            </summary>
            <param name="reasoner">Reasoner to add.</param>
        </member>
        <member name="M:VDS.RDF.InferencingTripleStore.RemoveInferenceEngine(VDS.RDF.Query.Inference.IInferenceEngine)">
            <summary>
            Removes an Inference Engine from the Triple Store.
            </summary>
            <param name="reasoner">Reasoner to remove.</param>
        </member>
        <member name="M:VDS.RDF.InferencingTripleStore.ClearInferenceEngines">
            <summary>
            Clears all Inference Engines from the Triple Store.
            </summary>
        </member>
        <member name="M:VDS.RDF.InferencingTripleStore.OnGraphAdded(System.Object,VDS.RDF.GraphEventArgs)">
            <summary>
            Event Handler for the <see cref="E:VDS.RDF.BaseGraphCollection.GraphAdded">Graph Added</see> event of the underlying Graph Collection which calls the normal event processing of the parent class <see cref="T:VDS.RDF.BaseTripleStore">BaseTripleStore</see> and then applies Inference to the newly added Graph.
            </summary>
            <param name="sender">Sender.</param>
            <param name="args">Graph Event Arguments.</param>
        </member>
        <member name="T:VDS.RDF.Ontology.ReasonerGraph">
            <summary>
            Represents a Graph with a reasoner attached.
            </summary>
            <remarks>
            <para>
            This class wraps an existing Graph and applies the given reasoner to it materialising the Triples in this Graph.  The original Graph itself is not modified but can be accessed if necessary using the <see cref="P:VDS.RDF.Ontology.ReasonerGraph.BaseGraph">BaseGraph</see> property.
            </para>
            <para>
            Any changes to this Graph (via <see cref="M:VDS.RDF.IGraph.Assert(VDS.RDF.Triple)">Assert()</see> and <see cref="M:VDS.RDF.IGraph.Retract(VDS.RDF.Triple)">Retract()</see>) affect this Graph - specifically the set of materialised Triples - rather than the original Graph around which this Graph is a wrapper.
            </para>
            <para>
            See <a href="http://www.dotnetrdf.org/content.asp?pageID=Ontology%20API">Using the Ontology API</a> for some informal documentation on the use of the Ontology namespace.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Ontology.ReasonerGraph.#ctor(VDS.RDF.IGraph,VDS.RDF.Query.Inference.IInferenceEngine)">
            <summary>
            Creates a new Reasoner Graph which is a wrapper around an existing Graph with a reasoner applied and the resulting Triples materialised.
            </summary>
            <param name="g">Graph.</param>
            <param name="reasoner">Reasoner.</param>
        </member>
        <member name="M:VDS.RDF.Ontology.ReasonerGraph.#ctor(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{VDS.RDF.Query.Inference.IInferenceEngine})">
            <summary>
            Creates a new Reasoner Graph which is a wrapper around an existing Graph with multiple reasoners applied and the resulting Triples materialised.
            </summary>
            <param name="g">Graph.</param>
            <param name="reasoners">Reasoner.</param>
        </member>
        <member name="M:VDS.RDF.Ontology.ReasonerGraph.Initialise">
            <summary>
            Internal method which initialises the Graph by applying the reasoners and setting the Node and Triple collections to be union collections.
            </summary>
        </member>
        <member name="P:VDS.RDF.Ontology.ReasonerGraph.BaseGraph">
            <summary>
            Gets the Base Graph which the reasoning is based upon.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.Inference.IInferenceEngine">
            <summary>
            Interfaces for Inference Engines.
            </summary>
            <remarks>
            <para>
            An Inference Engine is a class that given a Graph can infer extra information from that Graph based on fixed rules or rules computed from the Graphs it is performing inference on.
            </para>
            <para>
            In general terms an implementation of an Inference Engine typically provides some form of forward chaining reasoner though implementations may do more advanced reasoning or wrap other kinds of reasoner.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies inference to the given Graph and outputs the inferred information to that Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)">
            <summary>
            Initialises the Inference Engine using the given Graph.
            </summary>
            <param name="g">Graph to initialise from.</param>
        </member>
        <member name="T:VDS.RDF.Query.Inference.OwlHelper">
            <summary>
            Helper class containing constants and methods for use in implementing OWL support.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode">
            <summary>
            Class containing Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DefaultStatements">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.AllClass">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.AllIndividual">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.AllProperty">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.AllStatements">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.AllStatementsIncludingJena">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.ClassAssertion">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.ComplementOf">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DataPropertyAssertion">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DifferentIndividuals">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DirectClassAssertion">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DirectSubClassOf">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DirectSubPropertyOf">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DisjointClasses">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.DisjointProperties">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.EquivalentClasses">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.EquivalentProperties">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.InverseProperties">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.ObjectPropertyAssertion">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.PropertyAssertion">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.SameIndividual">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.SubClassOf">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlExtractMode.SubPropertyOf">
            <summary>
            OWL Extraction Mode constants.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.Inference.OwlHelper.OwlNothing">
            <summary>
            OWL Class and Property Constants.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.Inference.IOwlReasoner">
            <summary>
            Proposed interface for OWL Reasoners - currently incomplete.
            </summary>
            <remarks>
            <para>
            <strong>Important:</strong> This interface is specifically designed so that it does not require the provision of a Graph to methods unless the method does not make sense without taking an <see cref="T:VDS.RDF.IGraph">IGraph</see> as a parameter.  This is because we envisage the use of this interface for connecting to reasoners which have their own access to the data over which they are reasoning and do not need it providing explicitly to them.
            </para>
            <para>
            Reasoner implementations may throw <see cref="T:System.NotSupportedException">NotSupportedException</see> for operations they don't support and may throw any other appropriate exceptions as appropriate for operations that encounter errors.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.Add(VDS.RDF.IGraph)">
            <summary>
            Adds a Graph to the reasoners knowledge base.
            </summary>
            <param name="g">Graph.</param>
            <remarks>
            <para>
            A reasoner may choose to do nothing in this method if that reasoner especially if it operates using some pre-defined, remote or otherwise immutable knowledge base.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.Extract(VDS.RDF.IGraph,VDS.RDF.INode)">
            <summary>
            Extract a reasoning enhanced sub-graph from the given Graph rooted at the given Node.
            </summary>
            <param name="g">Graph.</param>
            <param name="n">Root Node.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.Extract(System.String)">
            <summary>
            Extracts all possible triples using the given extraction mode.
            </summary>
            <param name="mode">Extraction Mode.</param>
            <returns></returns>
            <remarks>
            The <paramref name="mode">mode</paramref> permits for the specification of an extraction mode for reasoners that can extract specific subsets of reasoning.  Where this is not supported the reasoner should simply extract all triples that can be inferred by reasoning.
            </remarks>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.Extract(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Extracts all possible triples using the given extraction modes.
            </summary>
            <param name="modes">Extraction Modes.</param>
            <returns></returns>
            <remarks>
            The <paramref name="modes">modes</paramref> permits for the specification of an extraction mode for reasoners that can extract specific subsets of reasoning.  Where this is not supported the reasoner should simply extract all triples that can be inferred by reasoning.
            </remarks>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.Classify">
            <summary>
            Extracts the triples which comprise the class hierarchy.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.Realize">
            <summary>
            Extracts the triples which comprise the class hierarchy and individuals of those classes.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.IsConsistent">
            <summary>
            Returns whether the underlying knowledge base is consistent.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IOwlReasoner.IsConsistent(VDS.RDF.IGraph)">
            <summary>
            Returns whether the given Graph is consistent with the underlying knowledge base.
            </summary>
            <param name="g">Graph.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="P:VDS.RDF.Query.Inference.IOwlReasoner.Unsatisfiable">
            <summary>
            Returns the enumeration of unsatisfiable classes.
            </summary>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="T:VDS.RDF.Query.Inference.IQueryableOwlReasoner">
            <summary>
            Interface for OWL Reasoners which have access to their own SPARQL implementations.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.IQueryableOwlReasoner.ExecuteQuery(System.String)">
            <summary>
            Executes a SPARQL Query using the reasoners SPARQL implementation.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the Reasoner does not support such an operation.</exception>
        </member>
        <member name="T:VDS.RDF.Query.Inference.StaticOwlReasonerWrapper">
            <summary>
            Wrapper around an <see cref="T:VDS.RDF.Query.Inference.IOwlReasoner">IOwlReasoner</see> to make it appear like a forward-chaining reasoner.
            </summary>
            <remarks>
            Essentially all this class does is extract all triples which the underlying reasoner can infer.  Currently the input graph and any graph passed to the <see cref="M:VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)">Initialise()</see> method have no effect on the output of the reasoner.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticOwlReasonerWrapper.#ctor(VDS.RDF.Query.Inference.IOwlReasoner)">
            <summary>
            Creates a new OWL Reasoner Wrapper around the given OWL Reasoner.
            </summary>
            <param name="reasoner">OWL Reasoner.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticOwlReasonerWrapper.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies the reasoner to the given Graph outputting inferences into the same Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticOwlReasonerWrapper.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies the reasoner to the given input Graph outputting inferences into the output Graph.
            </summary>
            <param name="input">Input Graph.</param>
            <param name="output">Output Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticOwlReasonerWrapper.Initialise(VDS.RDF.IGraph)">
            <summary>
            Initialises the reasoner.
            </summary>
            <param name="g">Graph to initialise with.</param>
        </member>
        <member name="T:VDS.RDF.Query.Inference.OwlReasonerWrapper">
            <summary>
            Wrapper around an <see cref="T:VDS.RDF.Query.Inference.IOwlReasoner">IOwlReasoner</see> to make it appear like a forward-chaining reasoner.
            </summary>
            <remarks>
            Effectively equivalent to <see cref="T:VDS.RDF.Query.Inference.StaticOwlReasonerWrapper">StaticOwlReasonerWrapper</see> except that every Graph reasoning is applied to is added to the reasoners knowledge base (unless the reasoner uses a fixed knowledge base).
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.OwlReasonerWrapper.#ctor(VDS.RDF.Query.Inference.IOwlReasoner)">
            <summary>
            Creates a new OWL Reasoner Wrapper around the given OWL Reasoner.
            </summary>
            <param name="reasoner">OWL Reasoner.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.OwlReasonerWrapper.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies the reasoner to the given Graph outputting inferences into the same Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.OwlReasonerWrapper.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies the reasoner to the given input Graph outputting inferences into the output Graph.
            </summary>
            <param name="input">Input Graph.</param>
            <param name="output">Output Graph.</param>
        </member>
        <member name="T:VDS.RDF.Query.Inference.StaticRdfsReasoner">
            <summary>
            An Inference Engine which uses RDFS reasoning.
            </summary>
            <remarks>
            <para>
            Does basic RDFS inferencing using the schema taken from the Graph(s) which are provided in calls to the reasoners <see cref="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.Initialise(VDS.RDF.IGraph)">Initialise()</see> method.
            </para>
            <para>
            Types of inference performed are as follows:.
            </para>
            <ul>
                <li>Class hierarchy reasoning - asserts additional types triples for anything that is typed as the subclass of a class.</li>
                <li>Property hierarchy reasoning - asserts additional property triples for anything where the predicate is a subproperty of a defined property</li>
                <li>Domain &amp; Range reasoning - asserts additional type triples based on the domains and ranges of properties</li>
            </ul>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.#ctor">
            <summary>
            Creates a new instance of the Static RdfsReasoner.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies inference to the given Graph and outputs the inferred information to that Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.Initialise(VDS.RDF.IGraph)">
            <summary>
            Imports any Class heirarchy information from the given Graph into the Reasoners Knowledge Base in order to initialise the Reasoner.
            </summary>
            <param name="g">Graph to import from.</param>
            <remarks>
            Looks for Triples defining things to be classes and those defining that something is a subClass of something.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.InferClasses(VDS.RDF.Triple,VDS.RDF.IGraph,VDS.RDF.IGraph,System.Collections.Generic.List{VDS.RDF.Triple})">
            <summary>
            Helper method which applies Class hierarchy inferencing.
            </summary>
            <param name="t">Triple defining the type for something.</param>
            <param name="input">Input Graph.</param>
            <param name="output">Output Graph.</param>
            <param name="inferences">List of Inferences.</param>
        </member>
        <member name="T:VDS.RDF.Query.Inference.RdfsReasoner">
            <summary>
            An Inference Engine which uses RDFS reasoning.
            </summary>
            <remarks>
            Does basic RDFS inferencing as detailed in the remarks for the <see cref="T:VDS.RDF.Query.Inference.StaticRdfsReasoner">StaticRdfsReasoner</see> except every Graph that inference is applied to has the potential to alter the schema which is in use.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RdfsReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
        <member name="T:VDS.RDF.Query.Inference.SimpleN3RulesReasoner">
            <summary>
            An Inference Engine that supports simple N3 rules.
            </summary>
            <remarks>
            <para>
            This reasoner should be initialised with a Graph that contains simple N3 rules such as the following:
            </para>
            <code>
            { ?x a ?type } => { ?type a rdfs:Class }.
            </code>
            <para>
            When initialised the reasoner takes account of variables declared with <em>@forAll</em> and <em>@forSome</em> directives though no guarantees that scoping will be correct if you've got multiple <em>@forAll</em> and <em>@forSome</em> directives.
            </para>
            <para>
            When the reasoner is applied to a Graph rules are implemented by generating a SPARQL Update INSERT command like the following and executing it on the given Graph.
            </para>
            <code>
            INSERT
            {
              ?type a rdfs:Class .
            }
            WHERE
            {
              ?x a ?type .
            }
            </code>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.SimpleN3RulesReasoner.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies reasoning to the given Graph materialising the generated Triples in the same Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.SimpleN3RulesReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies reasoning on the Input Graph materialising the generated Triples in the Output Graph.
            </summary>
            <param name="input">Input Graph.</param>
            <param name="output">Output Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.SimpleN3RulesReasoner.Initialise(VDS.RDF.IGraph)">
            <summary>
            Initialises the Reasoner.
            </summary>
            <param name="g">Rules Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.SimpleN3RulesReasoner.TryCreateRule(VDS.RDF.Triple)">
            <summary>
            Tries to create a Rule.
            </summary>
            <param name="t">Triple.</param>
        </member>
        <member name="T:VDS.RDF.Query.Inference.StaticSkosReasoner">
            <summary>
            An Inference Engine that uses SKOS Concept Hierarchies.
            </summary>
            <remarks>
            <para>
            Infers additional values for properties based on SKOS Concept Hierarcies.  If there is a Triple whose value is a Concept from the hierarchy then new versions of that Triple will be inferred where the object becomes each concept higher in the hierarchy.
            </para>
            </remarks>
        </member>
        <member name="F:VDS.RDF.Query.Inference.StaticSkosReasoner.SKOSNamespace">
            <summary>
            Namespace for SKOS.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor">
            <summary>
            Creates a new instance of the SKOS Reasoner.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies inference to the given Graph and outputs the inferred information to that Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise(VDS.RDF.IGraph)">
            <summary>
            Imports any Concept heirarchy information from the given Graph into the Reasoners Knowledge Base in order to initialise the Reasoner.
            </summary>
            <param name="g">Graph to import from.</param>
            <remarks>
            Looks for Triples defining SKOS concepts and relating them to narrower and broader concepts.
            </remarks>
        </member>
        <member name="T:VDS.RDF.Query.Inference.SkosReasoner">
            <summary>
            An Inference Engine that uses SKOS Concept Hierarchies.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.SkosReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
    </members>
</doc>
