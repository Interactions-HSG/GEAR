<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotNetRdf.Query.FullText</name>
    </assembly>
    <members>
        <member name="T:VDS.RDF.Query.Algebra.FullTextQuery">
            <summary>
            Algebra Operator which provides full text query capabilities for a query.
            </summary>
            <remarks>
            The evaluation of this operator simply registers the search provider with the Evaluation Context such that any <see cref="T:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction"/> instances are honoured.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.#ctor(VDS.RDF.Query.FullText.Search.IFullTextSearchProvider,VDS.RDF.Query.Algebra.ISparqlAlgebra)">
            <summary>
            Creates a new Full Text Query algebra.
            </summary>
            <param name="searchProvider">Search Provider.</param>
            <param name="algebra">Inner Algebra.</param>
        </member>
        <member name="P:VDS.RDF.Query.Algebra.FullTextQuery.InnerAlgebra">
            <summary>
            Gets the Inner Algebra.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.Transform(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)">
            <summary>
            Transforms the algebra.
            </summary>
            <param name="optimiser">Optimiser.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)">
            <summary>
            Evaluates the algebra.
            </summary>
            <param name="context">Evaluation Context.</param>
            <returns></returns>
        </member>
        <member name="P:VDS.RDF.Query.Algebra.FullTextQuery.Variables">
            <summary>
            Gets the variables used in the algebra.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.Algebra.FullTextQuery.FloatingVariables">
            <summary>
            Gets the enumeration of floating variables in the algebra i.e. variables that are not guaranteed to have a bound value.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.Algebra.FullTextQuery.FixedVariables">
            <summary>
            Gets the enumeration of fixed variables in the algebra i.e. variables that are guaranteed to have a bound value.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.ToQuery">
            <summary>
            Converts the algebra into a query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.ToGraphPattern">
            <summary>
            Converts the algebra into a Graph Pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.ToString">
            <summary>
            Gets the string representation of the algebra.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.Accept``1(VDS.RDF.Query.ISparqlAlgebraVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Query.Algebra.FullTextQuery.Accept``2(VDS.RDF.Query.ISparqlQueryAlgebraProcessor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="T:VDS.RDF.Query.Datasets.FullTextIndexedDataset">
            <summary>
            A Full Text Indexed Dataset is a wrapper around another dataset and provides automatic full text indexing of data that is added and removed.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset,VDS.RDF.Query.FullText.Indexing.IFullTextIndexer,System.Boolean)">
            <summary>
            Creates a new Full Text Indexed Dataset.
            </summary>
            <param name="dataset">Dataset to wrap.</param>
            <param name="indexer">Indexer to use.</param>
            <param name="indexNow">Whether the dataset provided should be indexed now, set to false if indexer is linked to an existing index for this data.</param>
            <remarks>
            If <paramref name="indexNow"/> is true then the provided dataset will be fully indexed when this constructor is called.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset,VDS.RDF.Query.FullText.Indexing.IFullTextIndexer)">
            <summary>
            Creates a new Full Text Indexed Dataset.
            </summary>
            <param name="dataset">Dataset to wrap.</param>
            <param name="indexer">Indexer to use.</param>
            <remarks>
            Does not do any indexing, assumes the provided dataset is already indexed.  When using this constructor only changes to the dataset affect the index.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.AddGraph(VDS.RDF.IGraph)">
            <summary>
            Adds a Graph to the Dataset updating the Full Text Index appropriately.
            </summary>
            <param name="g">Graph to add.</param>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.RemoveGraph(System.Uri)">
            <summary>
            Removes a Graph from the Dataset updating the Full Text Index appropriately.
            </summary>
            <param name="graphUri">URI of the Graph to remove.</param>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.RemoveGraph(VDS.RDF.IRefNode)">
            <summary>
            Removes a Graph from the Dataset updating the full text index appropriately.
            </summary>
            <param name="graphName">Graph name.</param>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.GetModifiableGraph(System.Uri)">
            <summary>
            Gets a modifiable graph from the store ensuring that modifications will update the Full Text Index.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.GetModifiableGraph(VDS.RDF.IRefNode)">
            <summary>
            Gets a modifiable graph from teh store, ensuring that modifications will update the full text index.
            </summary>
            <param name="graphName"></param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.HandleTripleAdded(System.Object,VDS.RDF.TripleEventArgs)">
            <summary>
            Handles the updating of the index when a triple is added.
            </summary>
            <param name="sender">Sender.</param>
            <param name="args">Event Arguments.</param>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.HandleTripleRemoved(System.Object,VDS.RDF.TripleEventArgs)">
            <summary>
            Handles the updating of the index when a triple is removed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="args">Event Arguments.</param>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.Flush">
            <summary>
            Flushes changes to the Dataset and ensures the Index is up to date.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.Discard">
            <summary>
            Discards changes to the Dataset and ensures the Index is up to date.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Datasets.FullTextIndexedDataset.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the Configuration of the Dataset.
            </summary>
            <param name="context">Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Query.Expressions.FullTextFunctionFactory">
            <summary>
            A SPARQL Expression Factory reserved as a future extension point but not currently compiled or used.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)">
            <summary>
            Tries to create an expression.
            </summary>
            <param name="u">Function URI.</param>
            <param name="args">Arguments.</param>
            <param name="scalarArguments">Scalar Arguments.</param>
            <param name="expr">Resulting SPARQL Expression.</param>
            <returns>True if a SPARQL Expression could be created, False otherwise.</returns>
        </member>
        <member name="P:VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions">
            <summary>
            Gets the URIs of available extension functions.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates">
            <summary>
            Gets the URIs of available extension aggregates.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.Expressions.Functions.FullTextMatchFunction">
            <summary>
            Represents a Full Text Match function, not currently used - reserved as a future extension point.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullTextExtensions.GetSha256Hash(System.String)">
            <summary>
            Gets a SHA256 Hash for a String.
            </summary>
            <param name="s">String to hash.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullTextExtensions.ToSafeString(System.Object)">
            <summary>
            Gets either the String form of the Object of the Empty String.
            </summary>
            <param name="obj">Object.</param>
            <returns>Result of calling <strong>ToString()</strong> on non-null objects and the empty string for null objects.</returns>
        </member>
        <member name="M:VDS.RDF.Query.FullTextExtensions.ToSafeString(System.Uri)">
            <summary>
            Gets either the String form of the URI of the Empty String.
            </summary>
            <param name="u">URI.</param>
            <returns>Result of calling <strong>AbsoluteUri</strong> on non-null URIs and the empty string for null URIs.</returns>
        </member>
        <member name="M:VDS.RDF.Query.FullTextExtensions.EnsureObjectFactory(VDS.RDF.Configuration.ConfigurationSerializationContext,System.Type)">
            <summary>
            Ensures that a specific Object Factory type is registered in a Configuration Graph.
            </summary>
            <param name="context">Configuration Serialization Context.</param>
            <param name="factoryType">Factory Type.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullTextHelper">
            <summary>
            Helper Class containing constants and static functions for use with Full Text Search.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.FullTextMatchNamespace">
            <summary>
            Constant for Full Text Namespace.
            </summary>
            <remarks>
            Is actually the ARQ Property Function Namespace and is used for compatibility with ARQ syntax for full text search.
            </remarks>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.FullTextMatchPredicateUri">
            <summary>
            Constant for Full Text Match Predicate.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.FullTextConfigurationNamespace">
            <summary>
            Constant for the Full Text Configuration Namespace which provides extensions to the basic Configuration API specific to Full Text indexing and search.
            </summary>
            <remarks>
            This vocabulary can be found as an embedded resource in this library as. <strong>VDS.RDF.Query.FullText.ttl</strong>
            </remarks>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.ClassIndex">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.ClassIndexer">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.ClassAnalyzer">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.ClassSchema">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.ClassSearcher">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyIndexer">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyIndex">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyAnalyzer">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertySearcher">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertySchema">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyVersion">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyEnsureIndex">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyBuildIndexFor">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyBuildIndexWith">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyIndexNow">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.PropertyIndexSync">
            <summary>
            Constants for additional URIs provided by the Full Text Configuration Namespace.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullTextHelper.ContextKey">
            <summary>
            Context Key used to store and retrieve the Search Provider in the Query Evaluation Context.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.FullTextQueryException">
            <summary>
            Exception Type for exceptions that may occur during Full Text Query.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.FullTextQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new Full Text Query Exception.
            </summary>
            <param name="message">Message.</param>
            <param name="cause">Inner Exception.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.FullTextQueryException.#ctor(System.String)">
            <summary>
            Creates a new Full Text Query Exception.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.FullTextIndexException">
            <summary>
            Exception Type for exceptions that may occur during Full Text Indexing.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.FullTextIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new Full Text Index Exception.
            </summary>
            <param name="message">Message.</param>
            <param name="cause">Inner Exception.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.FullTextIndexException.#ctor(System.String)">
            <summary>
            Creates a new Full Text Index Exception.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer">
            <summary>
            Abstract Base Class for Full Text Indexers which implements the basic logic leaving derived classes to implement the index specific logic.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Finalize">
            <summary>
            Destructor for the Indexer which ensures it is disposed of
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.IndexingMode">
            <summary>
            Gets the Indexing Mode used by this Indexer.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Index(System.String,VDS.RDF.Triple)">
            <summary>
            Indexes a Triple associating it with the given Graph.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="t">Triple.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Index(VDS.RDF.Triple)">
            <inheritdoc/>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Index(VDS.RDF.IGraph,VDS.RDF.Triple)">
            <summary>
            Indexes a Triple.
            </summary>
            <param name="g">Graph context of the triple to be indexed.</param>
            <param name="t">Triple.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Index(VDS.RDF.IGraph)">
            <summary>
            Indexes a Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Index(VDS.RDF.Query.Datasets.ISparqlDataset)">
            <summary>
            Indexes a Dataset.
            </summary>
            <param name="dataset">Dataset.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Unindex(System.String,VDS.RDF.Triple)">
            <summary>
            Unindexes a Triple associating it with the given Graph.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="t">Triple.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Unindex(VDS.RDF.Triple)">
            <summary>
            Unindexes a Triple.
            </summary>
            <param name="t">Triple.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Unindex(VDS.RDF.IGraph,VDS.RDF.Triple)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Unindex(VDS.RDF.IGraph)">
            <summary>
            Unindexes a Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Unindex(VDS.RDF.Query.Datasets.ISparqlDataset)">
            <summary>
            Unindexes a Dataset.
            </summary>
            <param name="dataset">Dataset.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Flush">
            <summary>
            Ensures any pending changes are flushed to the actual index.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Dispose">
            <summary>
            Disposes of the Indexer.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.Dispose(System.Boolean)">
            <summary>
            Disposes of the Indexer.
            </summary>
            <param name="disposing">Whether this was called by the Dispose method.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseFullTextIndexer.DisposeInternal">
            <summary>
            Virtual method that can be overridden to add implementation specific dispose logic.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.BaseSimpleFullTextIndexer">
            <summary>
            Abstract Implementation of a simple Full Text Indexer which simply indexes the full text of literal objects and associates a specific Node with that full text.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseSimpleFullTextIndexer.Index(System.String,VDS.RDF.Triple)">
            <summary>
            Indexes a Triple.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="t">Triple.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseSimpleFullTextIndexer.Index(System.String,VDS.RDF.INode,System.String)">
            <summary>
            Abstract method that derived classes must implement to do the actual indexing of full text and node pairs.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="n">Node.</param>
            <param name="text">Full Text.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseSimpleFullTextIndexer.Unindex(System.String,VDS.RDF.Triple)">
            <summary>
            Unindexes a Triple.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="t">Triple.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.BaseSimpleFullTextIndexer.Unindex(System.String,VDS.RDF.INode,System.String)">
            <summary>
            Abstract method that derived classes must implement to do the actual unindexing of full text and nodes.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="n">Node to index.</param>
            <param name="text">Full Text to associate with the Node.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.IndexingMode">
            <summary>
            Indicates the Indexing Mode used by an Indexer to index literals.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Indexing.IndexingMode.Objects">
            <summary>
            Indicates that the Indexer stores the original Object Literal whose text is indexed
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Indexing.IndexingMode.Subjects">
            <summary>
            Indicates that the Indexer stores the Subject (Blank Node/URI) associated with the Literal whose text is indexed
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Indexing.IndexingMode.Predicates">
            <summary>
            Indicates that the Indexer stores the Predicate (URI) associated with the Literal whose text is indexed
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Indexing.IndexingMode.Custom">
            <summary>
            Indicates that the Indexer uses some other custom indexing strategy
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer">
            <summary>
            Interface for classes that provide full text indexing functionality.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.IndexingMode">
            <summary>
            Gets the Indexing Mode used.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Index(VDS.RDF.Triple)">
            <summary>
            Indexes a Triple.
            </summary>
            <param name="t">Triple.</param>
            <remarks>
            Implementations <emph>SHOULD NOT</emph> automatically Flush changes to the indexes at the end of this operation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Index(VDS.RDF.IGraph,VDS.RDF.Triple)">
            <summary>
            Indexes a triple in the context of a graph.
            </summary>
            <param name="g">The graph context of the triple.</param>
            <param name="t">The triple to index.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Index(VDS.RDF.IGraph)">
            <summary>
            Indexes a Graph.
            </summary>
            <param name="g">Graph.</param>
            <remarks>
            Implementations <emph>SHOULD</emph> automatically Flush changes to the indexes at the end of this operation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Index(VDS.RDF.Query.Datasets.ISparqlDataset)">
            <summary>
            Indexes a Dataset.
            </summary>
            <param name="dataset">Dataset.</param>
            <remarks>
            Implementations <emph>SHOULD</emph> automatically Flush changes to the indexes at the end of this operation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Unindex(VDS.RDF.Triple)">
            <summary>
            Unindexes a Triple.
            </summary>
            <param name="t">Triple.</param>
            <remarks>
            Implementations <emph>SHOULD NOT</emph> automatically Flush changes to the indexes at the end of this operation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Unindex(VDS.RDF.IGraph,VDS.RDF.Triple)">
            <summary>
            Unindexes a triple in the context of a graph.
            </summary>
            <param name="g">The graph context of the triple.</param>
            <param name="t">The triple to be unindexed.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Unindex(VDS.RDF.IGraph)">
            <summary>
            Unindexes a Graph.
            </summary>
            <param name="g">Graph.</param>
            <remarks>
            Implementations <emph>SHOULD</emph> automatically Flush changes to the indexes at the end of this operation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Unindex(VDS.RDF.Query.Datasets.ISparqlDataset)">
            <summary>
            Unindexes a Dataset.
            </summary>
            <param name="dataset">Dataset.</param>
            <remarks>
            Implementations <emph>SHOULD</emph> automatically Flush changes to the indexes at the end of this operation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer.Flush">
            <summary>
            Flushes any outstanding changes to the Index.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer">
            <summary>
            Abstract Implementation of a simple Full Text Indexer using Lucene.Net which indexes the full text of literal objects and associated a specific Node with that full text.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.#ctor(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema,VDS.RDF.Query.FullText.Indexing.IndexingMode)">
            <summary>
            Creates a new Simple Lucene Indexer.
            </summary>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
            <param name="mode">Indexing Mode.</param>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.IndexingMode">
            <summary>
            Gets the Indexing Mode used.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.Index(System.String,VDS.RDF.INode,System.String)">
            <summary>
            Indexes a Node and some full text as a Lucene document.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="n">Node.</param>
            <param name="text">Full Text.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.Unindex(System.String,VDS.RDF.INode,System.String)">
            <summary>
            Unindexes a Node and some full text.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="n">Node.</param>
            <param name="text">Full Text.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.CreateDocument(System.String,VDS.RDF.INode,System.String)">
            <summary>
            Creates a Lucene document to add to the index.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="n">Node.</param>
            <param name="text">Full Text.</param>
            <returns></returns>
            <remarks>
            May be overridden by derived classes that wish to implement custom indexing behaviour.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.GetHash(System.String,VDS.RDF.INode,System.String)">
            <summary>
            Gets the hash that should be included as part of a document so that it can be unindexed if desired.
            </summary>
            <param name="graphUri">Graph URI.</param>
            <param name="n">Node.</param>
            <param name="text">Full Text.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.Flush">
            <summary>
            Flushes any changes to the index.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.DisposeInternal">
            <summary>
            Lucene dispose logic that ensures changes to the index are discarded.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.BaseSimpleLuceneIndexer.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the Configuration of the Indexer.
            </summary>
            <param name="context">Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.Lucene.LucenePredicatesIndexer">
            <summary>
            A Lucene.Net based indexer which indexes the predicate from the triple with the full text of the literal object.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.LucenePredicatesIndexer.#ctor(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema)">
            <summary>
            Creates a Lucene Predicates Indexer.
            </summary>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.Lucene.LuceneObjectsIndexer">
            <summary>
            A Lucene.Net based indexer which indexes the original object from the triple with the full text of that literal object.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.LuceneObjectsIndexer.#ctor(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema)">
            <summary>
            Creates a Lucene Objects Indexer.
            </summary>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.Lucene.LuceneSubjectsIndexer">
            <summary>
            A Lucene.Net based indexer which indexes the original subject from the triple with the full text of the literal object.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Indexing.Lucene.LuceneSubjectsIndexer.#ctor(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema)">
            <summary>
            Creates a Lucene Subjects Indexer.
            </summary>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.Lucene.NamespaceDoc">
            <summary>
            This namespace provides implementations of the <see cref="T:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer">IFullTextIndexer</see> interface which use Lucene.Net to create indexes.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Indexing.NamespaceDoc">
            <summary>
            This namespace provides Full Text Indexing functionality through the <see cref="T:VDS.RDF.Query.FullText.Indexing.IFullTextIndexer">IFullTextIndexer</see> interface.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Schema.BaseIndexSchema">
            <summary>
            Abstract Base Implementation of an Index Schema.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.BaseIndexSchema.IndexField">
            <summary>
            Gets the field in which the full text is indexed.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.BaseIndexSchema.GraphField">
            <summary>
            Gets the field in which the Graph URI is indexed.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.BaseIndexSchema.HashField">
            <summary>
            Gets the field in which the hash is stored.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.BaseIndexSchema.NodeTypeField">
            <summary>
            Gets the field in which the Node type is stored.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.BaseIndexSchema.NodeValueField">
            <summary>
            Gets the field in which the Node value is stored.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.BaseIndexSchema.NodeMetaField">
            <summary>
            Gets the field in which the Node meta is stored.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema">
            <summary>
            Default Index Schema.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.DefaultIndexField">
            <summary>
            Constants for the Field Names used by the Default Index Schema.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.DefaultGraphField">
            <summary>
            Constants for the Field Names used by the Default Index Schema.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.DefaultHashField">
            <summary>
            Constants for the Field Names used by the Default Index Schema.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.DefaultNodeTypeField">
            <summary>
            Constants for the Field Names used by the Default Index Schema.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.DefaultNodeValueField">
            <summary>
            Constants for the Field Names used by the Default Index Schema.
            </summary>
        </member>
        <member name="F:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.DefaultNodeMetaField">
            <summary>
            Constants for the Field Names used by the Default Index Schema.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.#ctor">
            <summary>
            Creates a new Default Index Schema.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the Schemas Configuration.
            </summary>
            <param name="context">Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema">
            <summary>
            Interface for Index Schemas.
            </summary>
            <remarks>
            Index Schemas are used to provide the set of field names that is used to encode indexed data onto a document in the index.
            </remarks>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema.IndexField">
            <summary>
            Gets the field in which the full text is indexed.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema.GraphField">
            <summary>
            Gets the field in which the Graph URI is indexed.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema.HashField">
            <summary>
            Gets the field in which the hash is stored.
            </summary>
            <remarks>
            Used for unindexing.
            </remarks>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema.NodeTypeField">
            <summary>
            Gets the field in which the Node type is stored.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema.NodeValueField">
            <summary>
            Gets the field in which the Node value is stored.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema.NodeMetaField">
            <summary>
            Gets the field in which the Node meta is stored.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Schema.NamespaceDoc">
            <summary>
            <para>
            This namespace contains classes pertaining to controlling how indexers encode the indexed information onto fields on index documents.
            </para>
            <para>
            Typically there should be no need to use anything other than the <see cref="T:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema">DefaultIndexSchema</see> unless you are creating a custom indexer.
            </para>
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider">
            <summary>
            Interface for classes that provide full text search capability.
            </summary>
            <remarks>
            The <strong>Match()</strong> methods may allow for provider specific query syntaxes depending on the the underlying provider.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.String,System.Double,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.String,System.Double)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.String,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="text">Search Query.</param>
            <param name="limit">Result Limit.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.String)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="text">Search Query.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Double,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Double)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="limit">Result Limit.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String,System.Double,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String,System.Double)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="limit">Result Limit.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider.IsAutoSynced">
            <summary>
            Gets whether the search provider is automatically synced with the index i.e. whether queries will always return results based on the latest state of the index.
            </summary>
            <remarks>
            Some implementations may allow this behaviour to be configured while for others this feature may always be on/off.
            </remarks>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.IFullTextSearchResult">
            <summary>
            Interface for representing Full Text Search Results.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.IFullTextSearchResult.Node">
            <summary>
            Gets the Node that was returned for this result.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.IFullTextSearchResult.Score">
            <summary>
            Gets the Score for this result.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.IFullTextSearchResult.GraphUri">
            <summary>
            Gets the Graph URI for this result.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.IFullTextSearchResult.GraphName">
            <summary>
            Gets the name of the graph that contains this result.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.FullTextSearchResult">
            <summary>
            Basic Implementation of a Full Text Search Result.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.FullTextSearchResult.#ctor(VDS.RDF.IRefNode,VDS.RDF.INode,System.Double)">
            <summary>
            Creates a new Full Text Search Result.
            </summary>
            <param name="graphName">Graph name.</param>
            <param name="n">Node.</param>
            <param name="score">Score.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.FullTextSearchResult.#ctor(VDS.RDF.INode,System.Double)">
            <summary>
            Creates a new Full Text Search Result.
            </summary>
            <param name="n">Node.</param>
            <param name="score">Score.</param>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.FullTextSearchResult.Node">
            <summary>
            Gets the Node.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.FullTextSearchResult.Score">
            <summary>
            Gets the Score.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.FullTextSearchResult.GraphUri">
            <summary>
            Gets the Graph URI of the result.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.FullTextSearchResult.GraphName">
            <summary>
            Gets the name of the graph that contains the result.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider">
            <summary>
            Abstract Base Implementation of a Full Text Search Provider using Lucene.Net.
            </summary>
            <remarks>
            Derived Implementations may only need to call the base constructor as the <see cref="T:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider">LuceneSearchProvider</see> does but if you've implemented custom indexing you may need to extend more of this class.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema,System.Boolean)">
            <summary>
            Creates a new Base Lucene Search Provider.
            </summary>
            <param name="ver">Lucene Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
            <param name="autoSync">Whether the Search Provider should stay in sync with the underlying index.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema)">
            <summary>
            Creates a new Base Lucene Search Provider.
            </summary>
            <param name="ver">Lucene Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Finalize">
            <summary>
            Destructor which ensures that the Search Provider is properly disposed of
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.String,System.Double,System.Int32)">
            <summary>
            Gets results that match the given query with the score threshold and limit applied.
            </summary>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.String,System.Double)">
            <summary>
            Gets results that match the given query with the score threshold applied.
            </summary>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.String,System.Int32)">
            <summary>
            Gets results that match the given query with a limit applied.
            </summary>
            <param name="text">Search Query.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.String)">
            <summary>
            Gets results that match the given query.
            </summary>
            <param name="text">Search Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Double,System.Int32)">
            <summary>
            Gets results that match the given query with the score threshold and limit applied.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Double)">
            <summary>
            Gets results that match the given query with the score threshold applied.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Int32)">
            <summary>
            Gets results that match the given query with a limit applied.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{System.Uri},System.String)">
            <summary>
            Gets results that match the given query.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String,System.Double,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String,System.Double)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="scoreThreshold">Score Threshold.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String,System.Int32)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
            <param name="limit">Result Limit.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Match(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},System.String)">
            <summary>
            Searches for matches for specific text.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="text">Search Query.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.FilterByGraph(System.Collections.Generic.IEnumerable{System.Uri},System.Collections.Generic.IEnumerable{VDS.RDF.Query.FullText.Search.IFullTextSearchResult})">
            <summary>
            Filters a set of results to ensure they occur in the given Graph(s).
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="results">Results.</param>
            <returns></returns>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.IsAutoSynced">
            <summary>
            Gets whether this search provider is always seeing the latest state of the index.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.EnsureCurrent">
            <summary>
            Ensures that the Index Searcher is searching the current Index unless this feature has been disabled by the user.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Dispose">
            <summary>
            Disposes of the Search Provider.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.Dispose(System.Boolean)">
            <summary>
            Disposes of the Search Provider.
            </summary>
            <param name="disposing">Whether this was called by the Dispose method.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.DisposeInternal">
            <summary>
            Virtual method that can be overridden to add implementation specific dispose logic.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.BaseLuceneSearchProvider.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes Configuration of this Provider.
            </summary>
            <param name="context">Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.Lucene.DocCollector">
            <summary>
            Collector Implementation used as part of our Lucene.Net integration.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.#ctor">
            <summary>
            Creates a new Collector.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.#ctor(System.Double)">
            <summary>
            Creates a new Collector with a given score threshold.
            </summary>
            <param name="scoreThreshold">Score Threshold.</param>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.Documents">
            <summary>
            Gets the Documents that have been collected.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.Count">
            <summary>
            Gets the number of collected documents.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.Collect(System.Int32)">
            <summary>
            Collects a document if it meets the score threshold (if any).
            </summary>
            <param name="doc">Document ID.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.SetNextReader(Lucene.Net.Index.AtomicReaderContext)">
            <summary>
            Sets the Next Reader.
            </summary>
            <param name="context">Index Reader context.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.SetScorer(Lucene.Net.Search.Scorer)">
            <summary>
            Sets the Scorer.
            </summary>
            <param name="scorer">Scorer.</param>
        </member>
        <member name="P:VDS.RDF.Query.FullText.Search.Lucene.DocCollector.AcceptsDocsOutOfOrder">
            <summary>
            Returns that documents are accepted out of order.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider">
            <summary>
            A Full Text Search provider using Lucene.Net.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema,System.Boolean)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
            <param name="autoSync">Whether to keep the search provider in sync with the index.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="schema">Index Schema.</param>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <param name="autoSync">Whether to keep the search provider in sync with the index.</param>
            <remarks>
            Uses the <see cref="T:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema">DefaultIndexSchema</see> as the schema.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="analyzer">Analyzer.</param>
            <remarks>
            Uses the <see cref="T:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema">DefaultIndexSchema</see> as the schema.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema,System.Boolean)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="schema">Index Schema.</param>
            <param name="autoSync">Whether to keep the search provider in sync with the index.</param>
            <remarks>
            Uses the <see cref="T:Lucene.Net.Analysis.Standard.StandardAnalyzer">StandardAnalyzer</see> as the analyzer.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,VDS.RDF.Query.FullText.Schema.IFullTextIndexSchema)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="schema">Index Schema.</param>
            <remarks>
            Uses the <see cref="T:Lucene.Net.Analysis.Standard.StandardAnalyzer">StandardAnalyzer</see> as the analyzer.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory,System.Boolean)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <param name="autoSync">Whether to jeep the search provider in sync with the index.</param>
            <remarks>
            Uses the <see cref="T:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema">DefaultIndexSchema</see> as the schema and the <see cref="T:Lucene.Net.Analysis.Standard.StandardAnalyzer">StandardAnalyzer</see> as the analyzer.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.FullText.Search.Lucene.LuceneSearchProvider.#ctor(Lucene.Net.Util.LuceneVersion,Lucene.Net.Store.Directory)">
            <summary>
            Creates a new Lucene Search Provider.
            </summary>
            <param name="ver">Version.</param>
            <param name="indexDir">Directory.</param>
            <remarks>
            Uses the <see cref="T:VDS.RDF.Query.FullText.Schema.DefaultIndexSchema">DefaultIndexSchema</see> as the schema and the <see cref="T:Lucene.Net.Analysis.Standard.StandardAnalyzer">StandardAnalyzer</see> as the analyzer.
            </remarks>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.Lucene.NamespaceDoc">
            <summary>
            This namespace provides implementations of the <see cref="T:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider">IFullTextSearchProvider</see> interface which use Lucene.Net to make full text queries.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.Search.NamespaceDoc">
            <summary>
            This namespace provides Full Text Query functionality through the <see cref="T:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider">IFullTextSearchProvider</see> and <see cref="T:VDS.RDF.Query.FullText.Search.IFullTextSearchResult">IFullTextSearchResult</see> interfaces.
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.FullText.NamespaceDoc">
            <summary>
            <para>
            This namespace provides Full Text Query capabilities that can be used with our Leviathan SPARQL Engine.  Currently only Lucene.Net based indexing is supported though the library is fully extensible so you can create your own indexing providers as desired.
            </para>
            <h3>Usage</h3>
            <para>
            To use these features you simply need to add a <see cref="T:VDS.RDF.Query.Optimisation.FullTextOptimiser">FullTextOptimiser</see> as an optimiser on your SPARQL Queries, this takes a <see cref="T:VDS.RDF.Query.FullText.Search.IFullTextSearchProvider">IFullTextSearchProvider</see> instance which performs the actual full text querying.  Once this is done you then simply need to use the relevant property in your SPARQL queries e.g.
            </para>
            <pre>
            PREFIX pf: &lt;http://jena.hpl.hp.com/ARQ/property#&gt;
            SELECT * WHERE { ?s pf:textMatch "text" }
            </pre>
            <para>
            Those who are familiar will note that this is the same syntax as used by <a href="http://jena.sourceforge.net/ARQ/lucene-arq.html">LARQ</a> and all the syntactic variations from LARQ such as retrieving scores, applying thresholds and limits are also supported by our full text query.
            </para>
            <para>
            Search Text can be a simple textual search term or it may be any valid query as supported by the underlying full text query provider:
            </para>
            <ul>
                <li>Lucene.Net - See the <a href="http://lucene.apache.org/java/2_9_2/queryparsersyntax.html">Lucene 2.9.2 Query Syntax</a> documentation</li>
            </ul>
            <h4>Important</h4>
            <para>
            The <strong>FullText</strong> namespace is provided by the plugin library. <strong>dotNetRDF.Query.FullText.dll</strong>
            </para>
            </summary>
        </member>
        <member name="T:VDS.RDF.Query.Optimisation.FullTextOptimiser">
            <summary>
            An Algebra Optimiser that ensures that Full Text Query support is available to query evaluation.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.Optimisation.FullTextOptimiser.UnsafeOptimisation">
            <inheritdoc/>
        </member>
        <member name="M:VDS.RDF.Query.Optimisation.FullTextOptimiser.#ctor(VDS.RDF.Query.FullText.Search.IFullTextSearchProvider)">
            <summary>
            Creates a Full Text Optimiser.
            </summary>
            <param name="provider">Full Text Search Provider.</param>
        </member>
        <member name="M:VDS.RDF.Query.Optimisation.FullTextOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)">
            <summary>
            Optimises the Algebra to apply the <see cref="T:VDS.RDF.Query.Algebra.FullTextQuery"/> operator which ensures Full Text Query support is available to the query evaluation.
            </summary>
            <param name="algebra">Algebra to optimise.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Optimisation.FullTextOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)">
            <summary>
            Returns that the optimiser is applicable to all queries.
            </summary>
            <param name="q">Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Optimisation.FullTextOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)">
            <summary>
            Returns that the optimiser is applicable to all updates.
            </summary>
            <param name="cmds">Updates.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.Optimisation.FullTextOptimiser.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the Optimisers Configuration.
            </summary>
            <param name="context">Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction">
            <summary>
            Property Function which does full text matching.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction.#ctor(VDS.RDF.Query.PropertyFunctions.PropertyFunctionInfo)">
            <summary>
            Constructs a Full Text Match property function.
            </summary>
            <param name="info">Property Function information.</param>
        </member>
        <member name="P:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction.FunctionUri">
            <summary>
            Gets the Function URI for the property function.
            </summary>
        </member>
        <member name="P:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction.Variables">
            <summary>
            Gets the Variables used in the property function.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)">
            <summary>
            Evaluates the property function.
            </summary>
            <param name="context">Evaluation Context.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction.GetResults(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},VDS.RDF.Query.FullText.Search.IFullTextSearchProvider,System.String)">
            <summary>
            Gets the Full Text Results for a specific search query.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="provider">Search Provider.</param>
            <param name="search">Search Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.PropertyFunctions.FullTextMatchPropertyFunction.GetResults(System.Collections.Generic.IEnumerable{VDS.RDF.IRefNode},VDS.RDF.Query.FullText.Search.IFullTextSearchProvider,System.String,System.Int32)">
            <summary>
            Gets the Full Text Results for a specific search query.
            </summary>
            <param name="graphUris">Graph URIs.</param>
            <param name="provider">Search Provider.</param>
            <param name="search">Search Query.</param>
            <param name="limit">Result Limit.</param>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Query.PropertyFunctions.FullTextPropertyFunctionFactory">
            <summary>
            Property Function factory for Full Text functions.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.PropertyFunctions.FullTextPropertyFunctionFactory.IsPropertyFunction(System.Uri)">
            <summary>
            Gets whether the given URI is a property function URI.
            </summary>
            <param name="u">URI.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Query.PropertyFunctions.FullTextPropertyFunctionFactory.TryCreatePropertyFunction(VDS.RDF.Query.PropertyFunctions.PropertyFunctionInfo,VDS.RDF.Query.Patterns.IPropertyFunctionPattern@)">
            <summary>
            Tries to create property functions.
            </summary>
            <param name="info">Function information.</param>
            <param name="function">Property Function.</param>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Configuration.FullTextObjectFactory">
            <summary>
            An Object Factory that can load types from the Full Text Query library (<strong>dotNetRDF.Query.FullText.dll</strong>).
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.LuceneSubjectsIndexer">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.LuceneObjectsIndexer">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.LucenePredicatesIndexer">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.DefaultIndexSchema">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.LuceneSearchProvider">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.FullTextOptimiser">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="F:VDS.RDF.Configuration.FullTextObjectFactory.FullTextIndexedDataset">
            <summary>
            Constants for loadable Types.
            </summary>
        </member>
        <member name="M:VDS.RDF.Configuration.FullTextObjectFactory.TryLoadObject(VDS.RDF.IGraph,VDS.RDF.INode,System.Type,System.Object@)">
            <summary>
            Tries to load an object based on information from the Configuration Graph.
            </summary>
            <param name="g">Configuration Graph.</param>
            <param name="objNode">Object Node.</param>
            <param name="targetType">Target Type.</param>
            <param name="obj">Output Object.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Configuration.FullTextObjectFactory.CanLoadObject(System.Type)">
            <summary>
            Gets whether this Factory can load objects of the given Type.
            </summary>
            <param name="t">Type.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Configuration.FullTextObjectFactory.GetLuceneVersion(System.Int32)">
            <summary>
            Converts from an integer to a Lucene.Net Version.
            </summary>
            <param name="ver">Version.</param>
            <returns></returns>
        </member>
    </members>
</doc>
