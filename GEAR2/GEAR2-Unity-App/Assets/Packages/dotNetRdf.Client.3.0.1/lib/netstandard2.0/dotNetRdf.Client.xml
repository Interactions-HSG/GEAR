<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dotNetRdf.Client</name>
    </assembly>
    <members>
        <member name="T:VDS.RDF.Configuration.StorageFactory">
            <summary>
            Factory class for producing <see cref="T:VDS.RDF.Storage.IStorageProvider">IStorageProvider</see> and <see cref="T:VDS.RDF.Storage.Management.IStorageServer"/> instances from Configuration Graphs.
            </summary>
        </member>
        <member name="M:VDS.RDF.Configuration.StorageFactory.TryLoadObject(VDS.RDF.IGraph,VDS.RDF.INode,System.Type,System.Object@)">
            <summary>
            Tries to load a Generic IO Manager based on information from the Configuration Graph.
            </summary>
            <param name="g">Configuration Graph.</param>
            <param name="objNode">Object Node.</param>
            <param name="targetType">Target Type.</param>
            <param name="obj">Output Object.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Configuration.StorageFactory.CanLoadObject(System.Type)">
            <summary>
            Gets whether this Factory can load objects of the given Type.
            </summary>
            <param name="t">Type.</param>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Storage.AllegroGraphConnector">
            <summary>
            Class for connecting to an AllegroGraph Store.
            </summary>
            <remarks>
            <para>
            Connection to AllegroGraph is based on their new HTTP Protocol which is an extension of the <a href="http://www.openrdf.org/doc/sesame2/system/ch08.html">Sesame 2.0 HTTP Protocol</a>.  The specification for the AllegroGraph protocol can be found. <a href="http://www.franz.com/agraph/support/documentation/current/new-http-server.html">here</a>
            </para>
            <para>
            If you wish to use a Store which is part of the Root Catalog on an AllegroGraph 4.x and higher server you can either use the constructor overloads that omit the <strong>catalogID</strong> parameter or pass in null as the value for that parameter.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base URI for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="storeID">Store ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.#ctor(System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="P:VDS.RDF.Storage.AllegroGraphConnector.Catalog">
            <summary>
            Gets the Catalog under which the repository you are connected to is located.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.Update(System.String)">
            <summary>
            Makes a SPARQL Update request to the Allegro Graph server.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.Update(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Makes a SPARQL Update request to the Allegro Graph server.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.UpdateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.EscapeQuery(System.String)">
            <summary>
            Does nothing as AllegroGraph does not require the same query escaping that Sesame does.
            </summary>
            <param name="query">Query to escape.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.CreateRequest(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.CreateRequest(System.String,System.String,System.Net.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.GetSaveContentType">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.ToString">
            <summary>
            Gets a String which gives details of the Connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.AllegroGraphConnector.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration.
            </summary>
            <param name="context">Configuration Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Storage.FourStoreConnector">
            <summary>
            Class for connecting to 4store.
            </summary>
            <remarks>
            <para>
            Depending on the version of <a href="http://librdf.org/rasqal/">RASQAL</a> used for your 4store instance and the options it was built with some kinds of queries may not suceed or return unexpected results.
            </para>
            <para>
            Prior to the 1.x releases 4store did not permit the saving of unamed Graphs to the Store or Triple level updates.  There was a branch of 4store that supports Triple level updates and you could tell the connector if your 4store instance supports this when you instantiate it.  From the 0.4.0 release of the library onwards this support was enabled by default since the 1.x builds of 4store have this feature integrated into them by default.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.#ctor(System.String)">
            <summary>
            Creates a new 4store connector which manages access to the services provided by a 4store server.
            </summary>
            <param name="baseUri">Base Uri of the 4store.</param>
            <remarks>
            <strong>Note:</strong> As of the 0.4.0 release 4store support defaults to Triple Level updates enabled as all recent 4store releases have supported this.  You can still optionally disable this with the two argument version of the constructor.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new 4store connector which manages access to the services provided by a 4store server.
            </summary>
            <param name="baseUri">Base Uri of the 4store.</param>
            <param name="enableUpdateSupport">Indicates to the connector that you are using a 4store instance that supports Triple level updates.</param>
            <remarks>
            If you enable Update support but are using a 4store instance that does not support Triple level updates then you will almost certainly experience errors while using the connector.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new 4store connector which manages access to the services provided by a 4store server.
            </summary>
            <param name="baseUri">Base Uri of the 4store.</param>
            <param name="proxy">Proxy Server.</param>
            <remarks>
            <strong>Note:</strong> As of the 0.4.0 release 4store support defaults to Triple Level updates enabled as all recent 4store releases have supported this.  You can still optionally disable this with the two argument version of the constructor.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.#ctor(System.String,System.Boolean,System.Net.IWebProxy)">
            <summary>
            Creates a new 4store connector which manages access to the services provided by a 4store server.
            </summary>
            <param name="baseUri">Base Uri of the 4store.</param>
            <param name="enableUpdateSupport">Indicates to the connector that you are using a 4store instance that supports Triple level updates.</param>
            <param name="proxy">Proxy Server.</param>
            <remarks>
            If you enable Update support but are using a 4store instance that does not support Triple level updates then you will almost certainly experience errors while using the connector.
            </remarks>
        </member>
        <member name="P:VDS.RDF.Storage.FourStoreConnector.UpdateSupported">
            <summary>
            Returns whether this connector has been instantiated with update support or not.
            </summary>
            <remarks>
            If this property returns true it does not guarantee that the 4store instance actually supports updates it simply indicates that the user has enabled updates on the connector.  If Updates are enabled and the 4store server being connected to does not support updates then errors will occur.
            </remarks>
        </member>
        <member name="P:VDS.RDF.Storage.FourStoreConnector.IsReady">
            <summary>
            Returns that the Connection is ready.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.FourStoreConnector.IsReadOnly">
            <summary>
            Returns that the Connection is not read-only.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.FourStoreConnector.IOBehaviour">
            <summary>
            Gets the IO Behaviour of 4store.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.FourStoreConnector.DeleteSupported">
            <summary>
            Returns that deleting Graph is supported.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.FourStoreConnector.ListGraphsSupported">
            <summary>
            Returns that Listing Graphs is supported.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.LoadGraph(VDS.RDF.IGraph,System.Uri)">
            <summary>
            Loads a Graph from the 4store instance.
            </summary>
            <param name="g">Graph to load into.</param>
            <param name="graphUri">Uri of the Graph to load.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.LoadGraph(VDS.RDF.IRdfHandler,System.Uri)">
            <summary>
            Loads a Graph from the 4store instance using an RDF Handler.
            </summary>
            <param name="handler">RDF Handler.</param>
            <param name="graphUri">URI of the Graph to load.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.LoadGraph(VDS.RDF.IGraph,System.String)">
            <summary>
            Loads a Graph from the 4store instance.
            </summary>
            <param name="g">Graph to load into.</param>
            <param name="graphUri">URI of the Graph to load.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.LoadGraph(VDS.RDF.IRdfHandler,System.String)">
            <summary>
            Loads a Graph from the 4store instance.
            </summary>
            <param name="handler">RDF Handler.</param>
            <param name="graphUri">URI of the Graph to load.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.SaveGraph(VDS.RDF.IGraph)">
            <summary>
            Saves a Graph to a 4store instance (Warning: Completely replaces any existing Graph with the same URI).
            </summary>
            <param name="g">Graph to save.</param>
            <remarks>
            <para>
            Completely replaces any existing Graph with the same Uri in the store.
            </para>
            <para>
            Attempting to save a Graph which doesn't have a Base Uri will result in an error.
            </para>
            </remarks>
            <exception cref="T:VDS.RDF.Storage.RdfStorageException">Thrown if you try and save a Graph without a Base Uri or if there is an error communicating with the 4store instance.</exception>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.UpdateGraph(System.Uri,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the store.
            </summary>
            <param name="graphUri">Uri of the Graph to Update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
            <remarks>
            May throw an error since the default builds of 4store don't support Triple level updates.  There are builds that do support this and the user can instantiate the connector with support for this enabled if they wish, if they do so and the underlying 4store doesn't support updates errors will occur when updates are attempted.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.UpdateGraph(VDS.RDF.IRefNode,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a graph in the store.
            </summary>
            <param name="graphName">Name of the graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
            <remarks>
            May throw an error since the default builds of 4store don't support Triple level updates.  There are builds that do support this and the user can instantiate the connector with support for this enabled if they wish, if they do so and the underlying 4store doesn't support updates errors will occur when updates are attempted.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the store.
            </summary>
            <param name="graphUri">Uri of the Graph to Update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
            <remarks>
            May throw an error since the default builds of 4store don't support Triple level updates.  There are builds that do support this and the user can instantiate the connector with support for this enabled if they wish, if they do so and the underlying 4store doesn't support updates errors will occur when updates are attempted.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.Query(System.String)">
            <summary>
            Makes a SPARQL Query against the underlying 4store Instance.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <returns>A <see cref="T:VDS.RDF.Graph">Graph</see> or a <see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see>.</returns>
            <remarks>
            Depending on the version of <a href="http://librdf.org/rasqal/">RASQAL</a> used and the options it was built with some kinds of queries may not suceed or return unexpected results.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Makes a SPARQL Query against the underlying 4store Instance processing the results with the appropriate handler from those provided.
            </summary>
            <param name="rdfHandler">RDF Handler.</param>
            <param name="resultsHandler">Results Handler.</param>
            <param name="sparqlQuery">SPARQL Query.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.DeleteGraph(System.Uri)">
            <summary>
            Deletes a Graph from the 4store server.
            </summary>
            <param name="graphUri">Uri of Graph to delete.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.DeleteGraph(System.String)">
            <summary>
            Deletes a Graph from the 4store server.
            </summary>
            <param name="graphUri">Uri of Graph to delete.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.ListGraphs">
            <summary>
            Lists the Graphs in the Store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.ListGraphNames">
            <summary>
            Gets an enumeration of the names of the graphs in the store.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            Implementations should implement this method only if they need to provide a custom way of listing Graphs.  If the Store for which you are providing a manager can efficiently return the Graphs using a SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } } query then there should be no need to implement this function.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.Update(System.String)">
            <summary>
            Applies a SPARQL Update against 4store.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
            <remarks>
            <strong>Note:</strong> Please be aware that some valid SPARQL Updates may not be accepted by 4store since the SPARQL parser used by 4store does not support some of the latest editors draft syntax changes.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.SaveGraph(VDS.RDF.IGraph,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Saves a Graph to the Store asynchronously.
            </summary>
            <param name="g">Graph to save.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.SaveGraphAsync(VDS.RDF.IGraph,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.LoadGraph(VDS.RDF.IRdfHandler,System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Loads a Graph from the Store asynchronously.
            </summary>
            <param name="handler">Handler to load with.</param>
            <param name="graphUri">URI of the Graph to load.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.LoadGraphAsync(VDS.RDF.IRdfHandler,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Updates a Graph in the Store asynchronously.
            </summary>
            <param name="graphUri">URI of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.UpdateGraphAsync(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.DeleteGraph(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Deletes a Graph from the Store.
            </summary>
            <param name="graphUri">URI of the Graph to delete.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.DeleteGraphAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.Update(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Updates the store asynchronously.
            </summary>
            <param name="sparqlUpdates">SPARQL Update.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.UpdateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.Query(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Queries the store asynchronously.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.QueryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Queries the store asynchronously.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <param name="rdfHandler">RDF Handler.</param>
            <param name="resultsHandler">Results Handler.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.QueryAsync(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.ToString">
            <summary>
            Gets a String which gives details of the Connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FourStoreConnector.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:VDS.RDF.Storage.FusekiConnector">
            <summary>
            Class for connecting to any dataset that can be exposed via Fuseki.
            </summary>
            <remarks>
            <para>
            Uses all three Services provided by a Fuseki instance - Query, Update and HTTP Update.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.#ctor(System.Uri,VDS.RDF.MimeTypeDefinition)">
            <summary>
            Creates a new connection to a Fuseki Server.
            </summary>
            <param name="serviceUri">The /data URI of the Fuseki Server.</param>
            <param name="writerMimeTypeDefinition">The MIME type of the syntax to use when sending RDF data to the server. Defaults to RDF/XML.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.#ctor(System.String,VDS.RDF.MimeTypeDefinition)">
            <summary>
            Creates a new connection to a Fuseki Server.
            </summary>
            <param name="serviceUri">The /data URI of the Fuseki Server.</param>
            <param name="writerMimeTypeDefinition">The MIME type of the syntax to use when sending RDF data to the server. Defaults to RDF/XML.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.#ctor(System.Uri,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Fuseki Server.
            </summary>
            <param name="serviceUri">The /data URI of the Fuseki Server.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Fuseki Server.
            </summary>
            <param name="serviceUri">The /data URI of the Fuseki Server.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="P:VDS.RDF.Storage.FusekiConnector.ListGraphsSupported">
            <summary>
            Returns that Listing Graphs is supported.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.FusekiConnector.IOBehaviour">
            <summary>
            Gets the IO Behaviour of the Store.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.FusekiConnector.UpdateSupported">
            <summary>
            Returns that Triple level updates are supported using Fuseki.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.ListGraphs">
            <summary>
            Gets the List of Graphs from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.ListGraphNames">
            <summary>
            Gets an enumeration of the names of the graphs in the store.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            Implementations should implement this method only if they need to provide a custom way of listing Graphs.  If the Store for which you are providing a manager can efficiently return the Graphs using a SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } } query then there should be no need to implement this function.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the Fuseki store.
            </summary>
            <param name="graphUri">URI of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.UpdateGraph(System.Uri,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the Fuseki store.
            </summary>
            <param name="graphUri">URI of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.Query(System.String)">
            <summary>
            Executes a SPARQL Query on the Fuseki store.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Executes a SPARQL Query on the Fuseki store processing the results using an appropriate handler from those provided.
            </summary>
            <param name="rdfHandler">RDF Handler.</param>
            <param name="resultsHandler">Results Handler.</param>
            <param name="sparqlQuery">SPARQL Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.Update(System.String)">
            <summary>
            Executes SPARQL Updates against the Fuseki store.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.Query(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Makes a SPARQL Query against the underlying store.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <returns><see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> or a <see cref="T:VDS.RDF.Graph">Graph</see> depending on the Sparql Query.</returns>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Executes a SPARQL Query on the Fuseki store processing the results using an appropriate handler from those provided.
            </summary>
            <param name="rdfHandler">RDF Handler.</param>
            <param name="resultsHandler">Results Handler.</param>
            <param name="sparqlQuery">SPARQL Query.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.QueryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.QueryAsync(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.Update(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Executes SPARQL Updates against the Fuseki store.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.UpdateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.ListGraphs(VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Lists the graph sin the Store asynchronously.
            </summary>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.ListGraphsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Updates a Graph on the Fuseki Server.
            </summary>
            <param name="graphUri">URI of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.UpdateGraphAsync(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.ToString">
            <summary>
            Gets a String which gives details of the Connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.FusekiConnector.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration.
            </summary>
            <param name="context">Configuration Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Storage.Management.AllegroGraphServer">
            <summary>
            Represents an AllegroGraph server, may be used to access and manage stores within a catalog on the server.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base URI for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store.
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="catalogID">Catalog ID.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.#ctor(System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new Connection to an AllegroGraph store in the Root Catalog (AllegroGraph 4.x and higher).
            </summary>
            <param name="baseUri">Base Uri for the Store.</param>
            <param name="username">Username for connecting to the Store.</param>
            <param name="password">Password for connecting to the Store.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.GetDefaultTemplate(System.String)">
            <summary>
            Gets a default template for creating a new Store.
            </summary>
            <param name="id">Store ID.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.GetAvailableTemplates(System.String)">
            <summary>
            Gets all available templates for creating a new Store.
            </summary>
            <param name="id">Store ID.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.CreateStore(VDS.RDF.Storage.Management.Provisioning.IStoreTemplate)">
            <summary>
            Creates a new Store (if it doesn't already exist).
            </summary>
            <param name="template">Template for creating the new Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.DeleteStore(System.String)">
            <summary>
            Requests that AllegroGraph deletes a Store.
            </summary>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.ListStores">
            <summary>
            Get the lists of stores available on the Server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.GetStore(System.String)">
            <summary>
            Gets a Store within the current catalog.
            </summary>
            <param name="storeId">Store ID.</param>
            <returns></returns>
            <remarks>
            AllegroGraph groups stores by catalogue, you may only use this method to obtain stores within your current catalogue.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.ListStores(VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets the List of Stores available  on the server within the current catalog asynchronously.
            </summary>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.GetDefaultTemplate(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets a default template for creating a new Store.
            </summary>
            <param name="id">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to callback.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.GetAvailableTemplates(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets all available templates for creating a new Store.
            </summary>
            <param name="id">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to callback.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.CreateStore(VDS.RDF.Storage.Management.Provisioning.IStoreTemplate,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Creates a new Store on the server within the current catalog asynchronously.
            </summary>
            <param name="template">Template to create the store from.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.DeleteStore(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Deletes a Store from the server within the current catalog asynchronously.
            </summary>
            <param name="storeId">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.GetStore(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets a Store within the current catalog asynchronously.
            </summary>
            <param name="storeId">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to call back.</param>
            <returns></returns>
            <remarks>
            AllegroGraph groups stores by catalog, you may only use this method to obtain stores within your current catalogue.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.CreateRequest(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.CreateRequest(System.String,System.String,System.Net.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.AllegroGraphServer.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration.
            </summary>
            <param name="context">Configuration Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Storage.Management.SesameServer">
            <summary>
            Represents a connection to a Sesame Server.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer.SystemRepositoryID">
            <summary>
            System Repository ID.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer._baseUri">
            <summary>
            Base Uri for the Server.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer._username">
            <summary>
            Username for accessing the Server.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer._pwd">
            <summary>
            Password for accessing the Server.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer._hasCredentials">
            <summary>
            Whether the User has provided credentials for accessing the Server using authentication.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer._repositoriesPrefix">
            <summary>
            Repositories Prefix.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.Management.SesameServer.TemplateTypes">
            <summary>
            Available Sesame template types.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.#ctor(System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.#ctor(System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="P:VDS.RDF.Storage.Management.SesameServer.IOBehaviour">
            <summary>
            Gets the IO Behaviour of the server.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetDefaultTemplate(System.String)">
            <summary>
            Gets a default template for creating a store.
            </summary>
            <param name="id">Store ID.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetAvailableTemplates(System.String)">
            <summary>
            Gets all available templates for creating a store.
            </summary>
            <param name="id">Store ID.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.CreateStore(VDS.RDF.Storage.Management.Provisioning.IStoreTemplate)">
            <summary>
            Creates a new Store based on the given template.
            </summary>
            <param name="template">Template.</param>
            <returns></returns>
            <remarks>
            <para>
            Templates must inherit from <see cref="T:VDS.RDF.Storage.Management.Provisioning.Sesame.BaseSesameTemplate"/>.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetStore(System.String)">
            <summary>
            Gets the Store with the given ID.
            </summary>
            <param name="storeId">Store ID.</param>
            <returns></returns>
            <remarks>
            If the Store ID requested represents the current instance then it is acceptable for an implementation to return itself.  Consumers of this method should be aware of this and if necessary use other means to create a connection to a store if they want a unique instance of the provider.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.DeleteStore(System.String)">
            <summary>
            Deletes the Store with the given ID.
            </summary>
            <param name="storeID">Store ID.</param>
            <remarks>
            Whether attempting to delete the Store that you are accessing is permissible is up to the implementation.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.DeleteStoreAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.ListStores">
            <summary>
            Gets the list of available stores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetDefaultTemplate(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets a default template for creating a store.
            </summary>
            <param name="id">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetDefaultTemplateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetAvailableTemplates(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets all available templates for creating a store.
            </summary>
            <param name="id">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetAvailableTemplatesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.CreateStore(VDS.RDF.Storage.Management.Provisioning.IStoreTemplate,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Creates a new store based on the given template.
            </summary>
            <param name="template">Template.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <remarks>
            <para>
            Template must inherit from <see cref="T:VDS.RDF.Storage.Management.Provisioning.Sesame.BaseSesameTemplate"/>.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.CreateStoreAsync(VDS.RDF.Storage.Management.Provisioning.IStoreTemplate,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetStore(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Gets a store asynchronously.
            </summary>
            <param name="storeId">Store ID.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <remarks>
            If the store ID requested matches the current instance an instance <em>MAY</em> invoke the callback immediately returning a reference to itself.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.GetStoreAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.DeleteStore(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Deletes a store asynchronously.
            </summary>
            <param name="storeID">ID of the store to delete.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.ListStoresAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.ListStores(VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Lists the available stores asynchronously.
            </summary>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.CreateRequest(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.CreateRequest(System.String,System.String,System.Net.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.EnsureSystemConnection">
            <summary>
            Ensures the connection to the Sesame SYSTEM repository is prepared if it isn't already.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.Dispose(System.Boolean)">
            <summary>
            Disposes of the server.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.Management.SesameServer.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration.
            </summary>
            <param name="context">Configuration Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Storage.BaseSesameHttpProtocolConnector">
            <summary>
            Abstract Base Class for connecting to any Store that supports the Sesame 2.0 HTTP Communication protocol.
            </summary>
            <remarks>
            <para>
            See <a href="http://www.openrdf.org/doc/sesame2/system/ch08.html">here</a> for the protocol specification, this base class supports Version 5 of the protocol which does not include SPARQL Update support.
            </para>
            </remarks>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._baseUri">
            <summary>
            Base Uri for the Store.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._store">
            <summary>
            Store ID.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._repositoriesPrefix">
            <summary>
            Repositories Prefix.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._queryPath">
            <summary>
            Query Path Prefix.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._updatePath">
            <summary>
            Update Path Prefix.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._fullContextEncoding">
            <summary>
            Whether to do full encoding of contexts.
            </summary>
        </member>
        <member name="F:VDS.RDF.Storage.BaseSesameHttpProtocolConnector._server">
            <summary>
            Server the store is hosted on.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.#ctor(System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.#ctor(System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.BaseUri">
            <summary>
            Gets the Base URI to the repository.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.RepositoryName">
            <summary>
            Gets the Repository Name that is in use.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.IOBehaviour">
            <summary>
            Gets the Save Behaviour of Stores that use the Sesame HTTP Protocol.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.UpdateSupported">
            <summary>
            Returns that Updates are supported on Sesame HTTP Protocol supporting Stores.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.DeleteSupported">
            <summary>
            Returns that deleting graphs from the Sesame store is supported.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.ListGraphsSupported">
            <summary>
            Returns that listing Graphs is supported.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.IsReady">
            <summary>
            Returns that the Connection is ready.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.IsReadOnly">
            <summary>
            Returns that the Connection is not read-only.
            </summary>
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.ParentServer">
            <summary>
            Gets the parent server.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.Query(System.String)">
            <summary>
            Makes a SPARQL Query against the underlying Store.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Makes a SPARQL Query against the underlying Store processing the results with an appropriate handler from those provided.
            </summary>
            <param name="rdfHandler">RDF Handler.</param>
            <param name="resultsHandler">Results Handler.</param>
            <param name="sparqlQuery">SPARQL Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.EscapeQuery(System.String)">
            <summary>
            Escapes a Query to avoid a character encoding issue when communicating a query to Sesame.
            </summary>
            <param name="query">Query.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.GetSaveContentType">
            <summary>
            Gets the Content Type used to save data to the store i.e. the MIME type to use for the <strong>Content-Type</strong> header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.CreateRdfWriter">
            <summary>
            Creates an RDF Writer to use for saving data to the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.LoadGraph(VDS.RDF.IGraph,System.Uri)">
            <summary>
            Loads a Graph from the Store.
            </summary>
            <param name="g">Graph to load into.</param>
            <param name="graphUri">Uri of the Graph to load.</param>
            <remarks>If a Null Uri is specified then the default graph (statements with no context in Sesame parlance) will be loaded.</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.LoadGraph(VDS.RDF.IRdfHandler,System.Uri)">
            <summary>
            Loads a Graph from the Store.
            </summary>
            <param name="handler">RDF Handler.</param>
            <param name="graphUri">Uri of the Graph to load.</param>
            <remarks>If a Null Uri is specified then the default graph (statements with no context in Sesame parlance) will be loaded.</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.LoadGraph(VDS.RDF.IGraph,System.String)">
            <summary>
            Loads a Graph from the Store.
            </summary>
            <param name="g">Graph to load into.</param>
            <param name="graphUri">Uri of the Graph to load.</param>
            <remarks>If a Null/Empty Uri is specified then the default graph (statements with no context in Sesame parlance) will be loaded.</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.LoadGraph(VDS.RDF.IRdfHandler,System.String)">
            <summary>
            Loads a Graph from the Store.
            </summary>
            <param name="handler">RDF Handler.</param>
            <param name="graphUri">Uri of the Graph to load.</param>
            <remarks>If a Null/Empty Uri is specified then the default graph (statements with no context in Sesame parlance) will be loaded.</remarks>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.SaveGraph(VDS.RDF.IGraph)">
            <summary>
            Saves a Graph into the Store (Warning: Completely replaces any existing Graph with the same URI unless there is no URI - see remarks for details).
            </summary>
            <param name="g">Graph to save.</param>
            <remarks>
            If the Graph has no URI then the contents will be appended to the Store, if the Graph has a URI then existing data associated with that URI will be replaced.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.UpdateGraph(System.Uri,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph.
            </summary>
            <param name="graphUri">Uri of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.UpdateGraph(VDS.RDF.IRefNode,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph.
            </summary>
            <param name="graphUri">Uri of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.UpdateGraphAsync(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.DeleteGraph(System.Uri)">
            <summary>
            Deletes a Graph from the Sesame store.
            </summary>
            <param name="graphUri">URI of the Graph to delete.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.DeleteGraph(System.String)">
            <summary>
            Deletes a Graph from the Sesame store.
            </summary>
            <param name="graphUri">URI of the Graph to delete.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.ListGraphs">
            <summary>
            Gets the list of Graphs in the Sesame store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.ListGraphNames">
            <summary>
            Gets an enumeration of the names of the graphs in the store.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            Implementations should implement this method only if they need to provide a custom way of listing Graphs.  If the Store for which you are providing a manager can efficiently return the Graphs using a SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } } query then there should be no need to implement this function.
            </para>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.ListGraphsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.AsyncParentServer">
            <summary>
            Gets the parent server.
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.SaveGraph(VDS.RDF.IGraph,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Saves a Graph to the Store asynchronously.
            </summary>
            <param name="g">Graph to save.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.SaveGraphAsync(System.Net.Http.HttpRequestMessage,VDS.RDF.IGraph,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Save a graph to the store asynchronously.
            </summary>
            <param name="request">The HTTP request to make to save the graph.</param>
            <param name="g">The graph being saved.</param>
            <param name="callback">The callback to invoke on completion.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.SaveGraphAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Save a graph to the store asynchronously.
            </summary>
            <param name="request">The HTTP request to make to save the graph.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.SaveGraphAsync(VDS.RDF.IGraph,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.LoadGraph(VDS.RDF.IRdfHandler,System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Loads a Graph from the Store asynchronously.
            </summary>
            <param name="handler">Handler to load with.</param>
            <param name="graphUri">URI of the Graph to load.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.LoadGraphAsync(VDS.RDF.IRdfHandler,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Updates a Graph in the Store asynchronously.
            </summary>
            <param name="graphUri">URI of the Graph to update.</param>
            <param name="additions">Triples to be added.</param>
            <param name="removals">Triples to be removed.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.DeleteGraph(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Deletes a Graph from the Store.
            </summary>
            <param name="graphUri">URI of the Graph to delete.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.DeleteGraphAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.Query(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Makes a SPARQL Query against the underlying store.
            </summary>
            <param name="sparqlQuery">SPARQL Query.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
            <returns><see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> or a <see cref="T:VDS.RDF.Graph">Graph</see> depending on the Sparql Query.</returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Makes a SPARQL Query against the underlying store processing the resulting Graph/Result Set with a handler of your choice.
            </summary>
            <param name="rdfHandler">RDF Handler.</param>
            <param name="resultsHandler">SPARQL Results Handler.</param>
            <param name="sparqlQuery">SPARQL Query.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.QueryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.QueryAsync(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.CreateRequest(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.CreateRequest(System.String,System.String,System.Net.Http.HttpMethod,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method for creating HTTP Requests to the Store.
            </summary>
            <param name="servicePath">Path to the Service requested.</param>
            <param name="accept">Acceptable Content Types.</param>
            <param name="method">HTTP Method.</param>
            <param name="queryParams">Querystring Parameters.</param>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.ToString">
            <summary>
            Gets a String which gives details of the Connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDS.RDF.Storage.BaseSesameHttpProtocolConnector.SerializeConfiguration(VDS.RDF.Configuration.ConfigurationSerializationContext)">
            <summary>
            Serializes the connection's configuration.
            </summary>
            <param name="context">Configuration Serialization Context.</param>
        </member>
        <member name="T:VDS.RDF.Storage.SesameHttpProtocolConnector">
            <summary>
            Connector for connecting to a Store that supports the Sesame 2.0 HTTP Communication protocol.
            </summary>
            <remarks>
            Acts as a synonym for whatever the latest version of the Sesame HTTP Protocol that is supported by dotNetRDF might be.  Currently this is Version 6 which includes SPARQL Update support (Sesame 2.4+ required).
            </remarks>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolConnector.#ctor(System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolConnector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolConnector.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolConnector.#ctor(System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="T:VDS.RDF.Storage.SesameHttpProtocolVersion5Connector">
            <summary>
            Connector for connecting to a Store that supports the Sesame 2.0 HTTP Communication Protocol version 5 (i.e. no SPARQL Update support).
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion5Connector.#ctor(System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion5Connector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion5Connector.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion5Connector.#ctor(System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="T:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector">
            <summary>
            Connector for connecting to a Store that supports the Sesame 2.0 HTTP Communication Protocol version 6 (i.e. includes SPARQL Update support).
            </summary>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector.#ctor(System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector.#ctor(System.String,System.String,System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Creates a new connection to a Sesame HTTP Protocol supporting Store.
            </summary>
            <param name="baseUri">Base Uri of the Store.</param>
            <param name="storeID">Store ID.</param>
            <param name="username">Username to use for requests that require authentication.</param>
            <param name="password">Password to use for requests that require authentication.</param>
            <param name="proxy">Proxy Server.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector.Update(System.String)">
            <summary>
            Makes a SPARQL Update request to the Sesame server.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
        </member>
        <member name="M:VDS.RDF.Storage.SesameHttpProtocolVersion6Connector.Update(System.String,VDS.RDF.Storage.AsyncStorageCallback,System.Object)">
            <summary>
            Makes a SPARQL Update request to the Sesame server.
            </summary>
            <param name="sparqlUpdate">SPARQL Update.</param>
            <param name="callback">Callback.</param>
            <param name="state">State to pass to the callback.</param>
        </member>
    </members>
</doc>
